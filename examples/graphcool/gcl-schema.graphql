# TODO now
# * challenge "src" to prevent deep nesting. alternative: file aware DSL
# * Multi graphql files
# * Reference graphql query from JS file

# TODO next release
# * migration scripts: @migrationValue not stateless: https://www.graph.cool/forum/t/continuous-deployment-and-graphcool-cli/368/5?u=nilan

# Future feature ideas:
# * unpersisted subscriptions
# * co query for convenience

type Query {
  config(gcl: Module): Boolean
}

input Module {
  database: Database!
  functions: [Function!]
  permissions: [Permission!]!
  pats: [PermanentAuthenticationToken!]
  modules: [Module!]
}

input Database {
  src: String!
}

input Function {
  name: String!
  description: String
  isEnabled: Boolean = true
  handler: FunctionHandler!
  event: FunctionEvent!
}

input FunctionHandler {
  webhook: FunctionHandlerWebhook
  code: FunctionHandlerCode
}

input FunctionHandlerWebhook {
  url: String!
  headers: [Header!]
}

input FunctionHandlerCode {
  src: String!
}

input Header {
  name: String!
  value: String!
}

input FunctionEvent {
  serverSideSubscription: FunctionEventServerSideSubscription
  middleware: FunctionEventMiddleware
  schemaExtension: FunctionEventSchemaExtension
  nodeCallback: FunctionEventNodeCallback
}

input FunctionEventMiddleware {
  order: Int # optional override
}

input FunctionEventServerSideSubscription {
  subscriptionQuery: FunctionEventServerSideSubscriptionQuery!
}

input FunctionEventServerSideSubscriptionQuery {
  src: String!
}

input FunctionEventSchemaExtension {
  schema: String!
}

input FunctionEventNodeCallback {
  target: String! # type, relation or interface
  operation: FunctionEventNodeCallbackOperation!
  step: FunctionEventNodeCallbackStep!
  order: Int
}

enum FunctionEventNodeCallbackOperation { Create, Update, Delete, Connect, Disconnect }

enum FunctionEventNodeCallbackStep {
  BeforeValidation
  AfterValidation
  AfterWrite
}

input Permission {
  description: String
  isEnabled: Boolean = true
  #operation: [String!]! # alternative idea: parameters by @nilan
  operation: String!
  authenticated: Boolean = false
  query: PermissionQuery
  fields: [String!] # wildcard syntax to limit intersection
}

input PermissionQuery {
  src: String!
  # operation: String
}

input PermanentAuthenticationToken {
  name: String!
  description: String
}